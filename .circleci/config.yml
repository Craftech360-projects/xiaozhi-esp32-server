commands:
  dockerhub_login:
    description: "Login to Docker registry"
    steps:
      - run:
          name: Login to Docker Hub
          command: |
            set -eo pipefail
            if [ -z "${DOCKERHUB_USERNAME}" ] || [ -z "${DOCKERHUB_PASSWORD}" ]; then
              echo "Docker Hub credentials not set. Please add DOCKERHUB_USERNAME / DOCKERHUB_PASSWORD to the selected context."
              exit 1
            fi
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

# Executors
executors:
  docker-executor:
    docker:
      - image: cimg/base:stable
    resource_class: large

# Jobs
jobs:
  # Build Manager API (Java Spring Boot)
  build-manager-api:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - dockerhub_login
      - run:
          name: Build Manager API Docker Image
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              TAG="latest"
            else
              TAG="${CIRCLE_BRANCH}-${CIRCLE_SHA1:0:7}"
            fi
            echo "Building manager-api:${TAG}"

            # Build from the manager-api directory
            cd main/manager-api
            docker build \
              -t xiaozhi/manager-api:${TAG} \
              -t xiaozhi/manager-api:${CIRCLE_SHA1:0:7} \
              .

            docker push xiaozhi/manager-api:${TAG}
            docker push xiaozhi/manager-api:${CIRCLE_SHA1:0:7}
      - run:
          name: Save Docker Image Info
          command: |
            mkdir -p /tmp/workspace
            echo "xiaozhi/manager-api:${CIRCLE_SHA1:0:7}" > /tmp/workspace/api-image
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - api-image

  # Build Manager Web (Vue.js Frontend)
  build-manager-web:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - dockerhub_login
      - run:
          name: Build Manager Web Docker Image
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              TAG="latest"
            else
              TAG="${CIRCLE_BRANCH}-${CIRCLE_SHA1:0:7}"
            fi
            echo "Building manager-web:${TAG}"

            # Build from the manager-web directory
            cd main/manager-web
            docker build \
              -t xiaozhi/manager-web:${TAG} \
              -t xiaozhi/manager-web:${CIRCLE_SHA1:0:7} \
              .

            docker push xiaozhi/manager-web:${TAG}
            docker push xiaozhi/manager-web:${CIRCLE_SHA1:0:7}
      - run:
          name: Save Docker Image Info
          command: |
            mkdir -p /tmp/workspace
            echo "xiaozhi/manager-web:${CIRCLE_SHA1:0:7}" > /tmp/workspace/web-image
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - web-image

  # Build MQTT Gateway (Node.js Service)
  build-mqtt-gateway:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - dockerhub_login
      - run:
          name: Build MQTT Gateway Docker Image
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              TAG="latest"
            else
              TAG="${CIRCLE_BRANCH}-${CIRCLE_SHA1:0:7}"
            fi
            echo "Building mqtt-gateway:${TAG}"

            # Build from the mqtt-gateway directory
            cd main/mqtt-gateway
            docker build \
              -t xiaozhi/mqtt-gateway:${TAG} \
              -t xiaozhi/mqtt-gateway:${CIRCLE_SHA1:0:7} \
              .

            docker push xiaozhi/mqtt-gateway:${TAG}
            docker push xiaozhi/mqtt-gateway:${CIRCLE_SHA1:0:7}
      - run:
          name: Save Docker Image Info
          command: |
            mkdir -p /tmp/workspace
            echo "xiaozhi/mqtt-gateway:${CIRCLE_SHA1:0:7}" > /tmp/workspace/gateway-image
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - gateway-image

  # Security scan for all images
  security-scan:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Trivy
          command: |
            sudo apt-get update -y
            sudo apt-get install -y wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
            sudo apt-get update -y
            sudo apt-get install -y trivy
      - run:
          name: Scan Images for Vulnerabilities
          command: |
            # Scan API image
            if [ -f /tmp/workspace/api-image ]; then
              API_IMAGE=$(cat /tmp/workspace/api-image)
              echo "Scanning $API_IMAGE"
              trivy image --exit-code 0 --severity HIGH,CRITICAL "$API_IMAGE"
            fi

            # Scan Web image
            if [ -f /tmp/workspace/web-image ]; then
              WEB_IMAGE=$(cat /tmp/workspace/web-image)
              echo "Scanning $WEB_IMAGE"
              trivy image --exit-code 0 --severity HIGH,CRITICAL "$WEB_IMAGE"
            fi

            # Scan Gateway image
            if [ -f /tmp/workspace/gateway-image ]; then
              GATEWAY_IMAGE=$(cat /tmp/workspace/gateway-image)
              echo "Scanning $GATEWAY_IMAGE"
              trivy image --exit-code 0 --severity HIGH,CRITICAL "$GATEWAY_IMAGE"
            fi

  # Deploy to staging/production
  deploy:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Deploy to Environment
          command: |
            echo "Deployment Environment: ${DEPLOY_ENV:-staging}"

            [ -f /tmp/workspace/api-image ] && echo "API Image: $(cat /tmp/workspace/api-image)"
            [ -f /tmp/workspace/web-image ] && echo "Web Image: $(cat /tmp/workspace/web-image)"
            [ -f /tmp/workspace/gateway-image ] && echo "Gateway Image: $(cat /tmp/workspace/gateway-image)"

            # Example deployment commands (customize as needed):
            # kubectl set image deployment/manager-api manager-api=$(cat /tmp/workspace/api-image)
            # kubectl set image deployment/manager-web manager-web=$(cat /tmp/workspace/web-image)
            # kubectl set image deployment/mqtt-gateway mqtt-gateway=$(cat /tmp/workspace/gateway-image)

            echo "Deployment completed successfully!"

# Workflows
workflows:
  version: 2

  # Build and deploy workflow
  build-and-deploy:
    jobs:
      # Build all three services in parallel
      - build-manager-api:
          context: docker-hub-creds
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/
                - /hotfix\/.*/

      - build-manager-web:
          context: docker-hub-creds
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/
                - /hotfix\/.*/

      - build-mqtt-gateway:
          context: docker-hub-creds
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/
                - /hotfix\/.*/

      # Security scanning after builds complete
      - security-scan:
          requires:
            - build-manager-api
            - build-manager-web
            - build-mqtt-gateway
          filters:
            branches:
              only:
                - main
                - develop

      # Deploy to staging for develop branch
      - deploy:
          name: deploy-staging
          requires:
            - security-scan
          filters:
            branches:
              only: develop
          context: staging-deploy

      # Deploy to production for main branch (requires manual approval)
      - hold-for-approval:
          type: approval
          requires:
            - security-scan
          filters:
            branches:
              only: main

      - deploy:
          name: deploy-production
          requires:
            - hold-for-approval
          filters:
            branches:
              only: main
          context: production-deploy

  # Nightly security scan
  nightly-security-scan:
    triggers:
      - schedule:
          cron: "0 2 * * *" # Run at 2 AM daily
          filters:
            branches:
              only: main
    jobs:
      - security-scan:
          context: docker-hub-creds
