version: 2.1

# =========================
# Executors
# =========================
executors:
  node-executor:
    docker:
      - image: cimg/node:20.14
    resource_class: large
    environment:
      NPM_CONFIG_RETRY: "3"
      NPM_CONFIG_FETCH_RETRY_MINTIMEOUT: "2000"
      NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT: "10000"

  base-executor:
    docker:
      - image: cimg/base:stable
    resource_class: large

# =========================
# Reusable Jobs (parameterized)
# =========================
jobs:
  deploy_node_pm2_azure:
    parameters:
      service_name: { type: string }
      service_path: { type: string } # same path on repo; used for cwd in PM2
      entry_file: { type: string, default: "app.js" }
      env: { type: string, default: "staging" } # staging|production
      # context: (REMOVED — reserved word)
      http_port: { type: integer, default: 8884 }
      mqtt_port: { type: integer, default: 1883 }
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - "SHA256:REPLACE_WITH_YOUR_SSH_FP"
      - run:
          name: Deploy to Azure VM with PM2
          command: |
            set -eo pipefail

            SVC="<< parameters.service_name >>"
            ENTRY="<< parameters.entry_file >>"
            ENV_NAME="<< parameters.env >>"
            HTTP_PORT="<< parameters.http_port >>"
            MQTT_PORT="<< parameters.mqtt_port >>"

            : "${AZURE_HOST:?Set AZURE_HOST in CircleCI context}"
            : "${AZURE_USER:?Set AZURE_USER in CircleCI context}"
            : "${AZURE_DEPLOY_PATH:?Set AZURE_DEPLOY_PATH in CircleCI context}"

            ART="/tmp/workspace/${SVC}.tar.gz"
            test -f "$ART" || { echo "Artifact missing: $ART"; exit 1; }

            echo "Deploying ${SVC} to ${AZURE_USER}@${AZURE_HOST} env=${ENV_NAME}"
            echo "Deploy root: ${AZURE_DEPLOY_PATH}"

            ssh -o StrictHostKeyChecking=no "${AZURE_USER}@${AZURE_HOST}" "
              set -eo pipefail
              mkdir -p ${AZURE_DEPLOY_PATH}/main/${SVC}
              mkdir -p /var/log/pm2
              if ! command -v pm2 >/dev/null 2>&1; then
                curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - && sudo apt-get install -y nodejs
                sudo npm install -g pm2
              fi
              sudo chown -R \$USER:\$USER ${AZURE_DEPLOY_PATH} /var/log/pm2
            "

            scp -o StrictHostKeyChecking=no "$ART" "${AZURE_USER}@${AZURE_HOST}:/tmp/${SVC}.tar.gz"

            ssh -o StrictHostKeyChecking=no "${AZURE_USER}@${AZURE_HOST}" "
              set -eo pipefail
              cd ${AZURE_DEPLOY_PATH}/main
              tar -xzf /tmp/${SVC}.tar.gz
              rm -f /tmp/${SVC}.tar.gz
              cd ${AZURE_DEPLOY_PATH}/main/${SVC}

              if [ -f package-lock.json ]; then
                npm ci --omit=dev --no-audit --no-fund
              else
                npm install --omit=dev --no-audit --no-fund
              fi

              cat > ${AZURE_DEPLOY_PATH}/${SVC}-pm2.config.js <<'EOF'
              module.exports = {
                apps: [{
                  name: "<< parameters.service_name >>",
                  script: "<< parameters.entry_file >>",
                  cwd: "/opt/xiaozhi-esp32-server/main/<< parameters.service_name >>",
                  instances: 1,
                  interpreter: "node",
                  autorestart: true,
                  watch: false,
                  max_memory_restart: "512M",
                  env: {
                    NODE_ENV: "development",
                    MQTT_PORT: << parameters.mqtt_port >>,
                    HTTP_PORT: << parameters.http_port >>,
                    DEBUG: ""
                  },
                  env_staging: {
                    NODE_ENV: "staging",
                    MQTT_PORT: << parameters.mqtt_port >>,
                    HTTP_PORT: << parameters.http_port >>,
                    DEBUG: ""
                  },
                  env_production: {
                    NODE_ENV: "production",
                    MQTT_PORT: << parameters.mqtt_port >>,
                    HTTP_PORT: << parameters.http_port >>,
                    DEBUG: ""
                  },
                  error_file: "/var/log/pm2/<< parameters.service_name >>-error.log",
                  out_file: "/var/log/pm2/<< parameters.service_name >>-out.log",
                  log_file: "/var/log/pm2/<< parameters.service_name >>-combined.log",
                  time: true,
                  log_date_format: "YYYY-MM-DD HH:mm:ss Z"
                }]
              }
              EOF

              if pm2 describe "<< parameters.service_name >>" >/dev/null 2>&1; then
                pm2 reload ${AZURE_DEPLOY_PATH}/<< parameters.service_name >>-pm2.config.js --env "<< parameters.env >>"
              else
                pm2 start  ${AZURE_DEPLOY_PATH}/<< parameters.service_name >>-pm2.config.js --env "<< parameters.env >>"
              fi
              pm2 save
            "

            ssh -o StrictHostKeyChecking=no "${AZURE_USER}@${AZURE_HOST}" "
              for i in \$(seq 1 20); do
                if curl -fsS http://127.0.0.1:${HTTP_PORT}/health >/div/null; then
                  echo '✓ << parameters.service_name >> healthy'
                  exit 0
                fi
                echo \"waiting for health... (\$i/20)\"
                sleep 3
              done
              echo 'Health check failed' && pm2 logs "<< parameters.service_name >>" --lines 50 && exit 1
            "

# =========================
# Workflows
# =========================
workflows:
  version: 2

  # Current: mqtt-gateway only
  mqtt-gateway-pipeline:
    jobs:
      - build_node_service:
          service_name: "mqtt-gateway"
          service_path: "main/mqtt-gateway"
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/
                - /hotfix\/.*/

      - test_node_service:
          service_name: "mqtt-gateway"
          service_path: "main/mqtt-gateway"
          entry_file: "app.js"
          requires: [build_node_service]

      - security_scan_bundle:
          service_name: "mqtt-gateway"
          requires: [build_node_service]

      # Deploy to staging on develop
      - deploy_node_pm2_azure:
          context: "azure-mqtt-gateway"
          service_name: "mqtt-gateway"
          service_path: "main/mqtt-gateway"
          entry_file: "app.js"
          env: "staging"
          http_port: 8884
          mqtt_port: 1883
          requires:
            - test_node_service
            - security_scan_bundle
          filters:
            branches:
              only: develop

      # Deploy to production on main
      - deploy_node_pm2_azure:
          context: "azure-mqtt-gateway"
          service_name: "mqtt-gateway"
          service_path: "main/mqtt-gateway"
          entry_file: "app.js"
          env: "production"
          http_port: 8884
          mqtt_port: 1883
          requires:
            - test_node_service
            - security_scan_bundle
          filters:
            branches:
              only: main
