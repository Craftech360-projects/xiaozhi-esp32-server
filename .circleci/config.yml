version: 2.1

# Reusable commands
commands:
  dockerhub_login:
    description: "Login to Docker registry (expects kiranvc/@Kiranvc2025 in context)"
    steps:
      - run:
          name: Login to Docker Hub
          command: |
            if [ -z "${kiranvc}" ] || [ -z "${@Kiranvc2025}" ]; then
              echo "Docker Hub credentials not set. Please add DOCKERHUB_USERNAME/DOCKERHUB_PASSWORD to the context."
              exit 1
            fi
            printf "%s" "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

# Executors
executors:
  docker-executor:
    docker:
      - image: cimg/base:stable
    resource_class: large

# Jobs
jobs:
  build-xiaozhi-server:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - dockerhub_login
      - run:
          name: Build XiaoZhi Server Docker Image
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              TAG="latest"
            else
              TAG="${CIRCLE_BRANCH}-${CIRCLE_SHA1:0:7}"
            fi
            echo "Building xiaozhi-server:${TAG}"

            docker build \
              -f Dockerfile-server \
              -t xiaozhi/xiaozhi-server:${TAG} \
              -t xiaozhi/xiaozhi-server:${CIRCLE_SHA1:0:7} \
              .

            docker push xiaozhi/xiaozhi-server:${TAG}
            docker push xiaozhi/xiaozhi-server:${CIRCLE_SHA1:0:7}
      - run:
          name: Save Docker Image Info
          command: |
            mkdir -p /tmp/workspace
            echo "xiaozhi/xiaozhi-server:${CIRCLE_SHA1:0:7}" > /tmp/workspace/server-image
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - server-image

  build-manager-api:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - dockerhub_login
      - run:
          name: Build Manager API Docker Image
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              TAG="latest"
            else
              TAG="${CIRCLE_BRANCH}-${CIRCLE_SHA1:0:7}"
            fi
            echo "Building manager-api:${TAG}"

            docker build \
              -f main/manager-api/Dockerfile \
              -t xiaozhi/manager-api:${TAG} \
              -t xiaozhi/manager-api:${CIRCLE_SHA1:0:7} \
              main/manager-api

            docker push xiaozhi/manager-api:${TAG}
            docker push xiaozhi/manager-api:${CIRCLE_SHA1:0:7}
      - run:
          name: Save Docker Image Info
          command: |
            mkdir -p /tmp/workspace
            echo "xiaozhi/manager-api:${CIRCLE_SHA1:0:7}" > /tmp/workspace/api-image
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - api-image

  build-manager-web:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - dockerhub_login
      - run:
          name: Build Manager Web Docker Image
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              TAG="latest"
            else
              TAG="${CIRCLE_BRANCH}-${CIRCLE_SHA1:0:7}"
            fi
            echo "Building manager-web:${TAG}"

            docker build \
              -f Dockerfile-web \
              -t xiaozhi/manager-web:${TAG} \
              -t xiaozhi/manager-web:${CIRCLE_SHA1:0:7} \
              .

            docker push xiaozhi/manager-web:${TAG}
            docker push xiaozhi/manager-web:${CIRCLE_SHA1:0:7}
      - run:
          name: Save Docker Image Info
          command: |
            mkdir -p /tmp/workspace
            echo "xiaozhi/manager-web:${CIRCLE_SHA1:0:7}" > /tmp/workspace/web-image
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - web-image

  security-scan:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Trivy
          command: |
            sudo apt-get update -y
            sudo apt-get install -y wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
            sudo apt-get update -y
            sudo apt-get install -y trivy
      - run:
          name: Scan Images for Vulnerabilities
          command: |
            if [ -f /tmp/workspace/server-image ]; then
              SERVER_IMAGE=$(cat /tmp/workspace/server-image)
              echo "Scanning $SERVER_IMAGE"
              trivy image --exit-code 0 --severity HIGH,CRITICAL "$SERVER_IMAGE"
            fi

            if [ -f /tmp/workspace/api-image ]; then
              API_IMAGE=$(cat /tmp/workspace/api-image)
              echo "Scanning $API_IMAGE"
              trivy image --exit-code 0 --severity HIGH,CRITICAL "$API_IMAGE"
            fi

            if [ -f /tmp/workspace/web-image ]; then
              WEB_IMAGE=$(cat /tmp/workspace/web-image)
              echo "Scanning $WEB_IMAGE"
              trivy image --exit-code 0 --severity HIGH,CRITICAL "$WEB_IMAGE"
            fi

  deploy:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Deploy to Environment
          command: |
            echo "Deployment Environment: ${DEPLOY_ENV:-staging}"

            [ -f /tmp/workspace/server-image ] && echo "Server Image: $(cat /tmp/workspace/server-image)"
            [ -f /tmp/workspace/api-image ] && echo "API Image: $(cat /tmp/workspace/api-image)"
            [ -f /tmp/workspace/web-image ] && echo "Web Image: $(cat /tmp/workspace/web-image)"

            echo "Deployment completed successfully!"

# Workflows
workflows:
  version: 2

  build-and-deploy:
    jobs:
      - build-xiaozhi-server:
          context: docker-hub-creds
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/
                - /hotfix\/.*/

      - build-manager-api:
          context: docker-hub-creds
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/
                - /hotfix\/.*/

      - build-manager-web:
          context: docker-hub-creds
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/
                - /hotfix\/.*/

      - security-scan:
          requires:
            - build-xiaozhi-server
            - build-manager-api
            - build-manager-web
          filters:
            branches:
              only:
                - main
                - develop

      - deploy:
          name: deploy-staging
          requires:
            - security-scan
          filters:
            branches:
              only: develop
          context: staging-deploy

      - hold-for-approval:
          type: approval
          requires:
            - security-scan
          filters:
            branches:
              only: main

      - deploy:
          name: deploy-production
          requires:
            - hold-for-approval
          filters:
            branches:
              only: main
          context: production-deploy

  nightly-security-scan:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only: main
    jobs:
      - security-scan:
          context: docker-hub-creds
