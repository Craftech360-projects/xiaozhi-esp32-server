version: 2.1

# =========================
# Executors
# =========================
executors:
  node-executor:
    docker:
      - image: cimg/node:20.14
    resource_class: large
    environment:
      NPM_CONFIG_RETRY: "3"
      NPM_CONFIG_FETCH_RETRY_MINTIMEOUT: "2000"
      NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT: "10000"

  base-executor:
    docker:
      - image: cimg/base:stable
    resource_class: large

# =========================
# Reusable Jobs (parameterized)
# =========================
jobs:
  # Build a Node service (installs prod deps & archives the folder)
build_node_service:
  parameters:
    service_name: { type: string }
    service_path: { type: string } # e.g. "main/mqtt-gateway"
  executor: node-executor
  steps:
    - checkout
    - restore_cache:
        keys:
          - npm-<< parameters.service_name >>-v1-{{ checksum "<< parameters.service_path >>/package-lock.json" }}
          - npm-<< parameters.service_name >>-v1-{{ checksum "<< parameters.service_path >>/package.json" }}
          - npm-<< parameters.service_name >>-v1-
    - run:
        name: Install prod deps & archive bundle (robust paths)
        command: |
          set -eo pipefail
          SVC="<< parameters.service_name >>"
          DIR="<< parameters.service_path >>"
          echo "Building $SVC from $DIR"

          # Compute absolute paths BEFORE changing directories
          ABS_DIR="$(cd "$(dirname "$DIR")" && pwd)"
          BASE="$(basename "$DIR")"
          echo "ABS_DIR=$ABS_DIR"
          echo "BASE=$BASE"
          test -d "$ABS_DIR/$BASE" || { echo "Missing $ABS_DIR/$BASE"; exit 1; }

          # Install production deps inside the service dir
          pushd "$ABS_DIR/$BASE" >/dev/null
          if [ -f package-lock.json ]; then
            npm ci --omit=dev --no-audit --no-fund
          else
            npm install --omit=dev --no-audit --no-fund
          fi
          node -v
          npm -v
          ls -la
          popd >/dev/null

          # Archive from the parent directory, so the tar contains "$BASE/..."
          mkdir -p /tmp/workspace
          tar -czf "/tmp/workspace/${SVC}.tar.gz" -C "$ABS_DIR" "$BASE"

          echo "${SVC}-${CIRCLE_SHA1:0:7}" > "/tmp/workspace/${SVC}-build-info"
          date -u +"%Y-%m-%dT%H:%M:%SZ" > "/tmp/workspace/${SVC}-build-date"
          echo "✅ ${SVC} archived to /tmp/workspace/${SVC}.tar.gz"
    - save_cache:
        paths:
          - << parameters.service_path >>/node_modules
        key: npm-<< parameters.service_name >>-v1-{{ checksum "<< parameters.service_path >>/package-lock.json" }}
    - persist_to_workspace:
        root: /tmp/workspace
        paths:
          - << parameters.service_name >>.tar.gz
          - << parameters.service_name >>-build-info
          - << parameters.service_name >>-build-date

  # Trivy scan for unpacked bundle
  security_scan_bundle:
    parameters:
      service_name: { type: string }
    executor: base-executor
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Trivy
          command: |
            set -eo pipefail
            sudo apt-get update -y
            sudo apt-get install -y wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
            sudo apt-get update -y
            sudo apt-get install -y trivy
      - run:
          name: Scan bundle
          command: |
            set -eo pipefail
            SVC="<< parameters.service_name >>"
            ART="/tmp/workspace/${SVC}.tar.gz"
            test -f "$ART" || { echo "Artifact missing: $ART"; exit 1; }

            mkdir -p "/tmp/${SVC}-scan"
            tar -xzf "$ART" -C "/tmp/${SVC}-scan"

            trivy fs --exit-code 0 --severity HIGH,CRITICAL "/tmp/${SVC}-scan/"
            echo "✅ Trivy scan passed for $SVC"

  # PM2 deploy over SSH to Azure VM
  deploy_node_pm2_azure:
    parameters:
      service_name: { type: string }
      service_path: { type: string } # repo path; used for cwd value in pm2 config
      entry_file: { type: string, default: "app.js" }
      env: { type: string, default: "staging" } # staging|production
      http_port: { type: integer, default: 8884 }
      mqtt_port: { type: integer, default: 1883 }
    executor: node-executor
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - "SHA256:ahYOf9ht0RgB6WUzFgCZqc3H4t6YcJTQFp+wrHrWShY" # replace if your fingerprint differs
      - run:
          name: Deploy to Azure VM with PM2
          command: |
            set -eo pipefail

            SVC="<< parameters.service_name >>"
            ENTRY="<< parameters.entry_file >>"
            ENV_NAME="<< parameters.env >>"
            HTTP_PORT="<< parameters.http_port >>"
            MQTT_PORT="<< parameters.mqtt_port >>"

            : "${AZURE_HOST:?Set AZURE_HOST in CircleCI context}"
            : "${AZURE_USER:?Set AZURE_USER in CircleCI context}"
            : "${AZURE_DEPLOY_PATH:?Set AZURE_DEPLOY_PATH in CircleCI context}"

            ART="/tmp/workspace/${SVC}.tar.gz"
            test -f "$ART" || { echo "Artifact missing: $ART"; exit 1; }

            echo "Deploying ${SVC} to ${AZURE_USER}@${AZURE_HOST} env=${ENV_NAME}"
            echo "Deploy root: ${AZURE_DEPLOY_PATH}"

            # Ensure VM ready & pm2 installed
            ssh -o StrictHostKeyChecking=no "${AZURE_USER}@${AZURE_HOST}" "
              set -eo pipefail
              mkdir -p ${AZURE_DEPLOY_PATH}/main/${SVC}
              mkdir -p /var/log/pm2
              if ! command -v pm2 >/dev/null 2>&1; then
                curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - && sudo apt-get install -y nodejs
                sudo npm install -g pm2
              fi
              sudo chown -R \$USER:\$USER ${AZURE_DEPLOY_PATH} /var/log/pm2
            "

            # Upload artifact
            scp -o StrictHostKeyChecking=no "$ART" "${AZURE_USER}@${AZURE_HOST}:/tmp/${SVC}.tar.gz"

            # Unpack + install + PM2 start/reload
            ssh -o StrictHostKeyChecking=no "${AZURE_USER}@${AZURE_HOST}" "
              set -eo pipefail
              cd ${AZURE_DEPLOY_PATH}/main
              tar -xzf /tmp/${SVC}.tar.gz
              rm -f /tmp/${SVC}.tar.gz
              cd ${AZURE_DEPLOY_PATH}/main/${SVC}

              if [ -f package-lock.json ]; then
                npm ci --omit=dev --no-audit --no-fund
              else
                npm install --omit=dev --no-audit --no-fund
              fi

              # Write PM2 ecosystem (escape heredoc for CircleCI with \<<)
              cat > ${AZURE_DEPLOY_PATH}/${SVC}-pm2.config.js \<<EOF
              module.exports = {
                apps: [{
                  name: "${SVC}",
                  script: "${ENTRY}",
                  cwd: "${AZURE_DEPLOY_PATH}/main/${SVC}",
                  instances: 1,
                  interpreter: "node",
                  autorestart: true,
                  watch: false,
                  max_memory_restart: "512M",
                  env: {
                    NODE_ENV: "development",
                    MQTT_PORT: ${MQTT_PORT},
                    HTTP_PORT: ${HTTP_PORT},
                    DEBUG: ""
                  },
                  env_staging: {
                    NODE_ENV: "staging",
                    MQTT_PORT: ${MQTT_PORT},
                    HTTP_PORT: ${HTTP_PORT},
                    DEBUG: ""
                  },
                  env_production: {
                    NODE_ENV: "production",
                    MQTT_PORT: ${MQTT_PORT},
                    HTTP_PORT: ${HTTP_PORT},
                    DEBUG: ""
                  },
                  error_file: "/var/log/pm2/${SVC}-error.log",
                  out_file: "/var/log/pm2/${SVC}-out.log",
                  log_file: "/var/log/pm2/${SVC}-combined.log",
                  time: true,
                  log_date_format: "YYYY-MM-DD HH:mm:ss Z"
                }]
              }
              EOF

              if pm2 describe "${SVC}" >/dev/null 2>&1; then
                pm2 reload ${AZURE_DEPLOY_PATH}/${SVC}-pm2.config.js --env "${ENV_NAME}"
              else
                pm2 start  ${AZURE_DEPLOY_PATH}/${SVC}-pm2.config.js --env "${ENV_NAME}"
              fi
              pm2 save
            "

            # Health check
            ssh -o StrictHostKeyChecking=no "${AZURE_USER}@${AZURE_HOST}" "
              for i in \$(seq 1 20); do
                if curl -fsS http://127.0.0.1:${HTTP_PORT}/health >/dev/null; then
                  echo '✓ ${SVC} healthy'
                  exit 0
                fi
                echo \"waiting for health... (\$i/20)\"
                sleep 3
              done
              echo 'Health check failed' && pm2 logs '${SVC}' --lines 50 && exit 1
            "

# =========================
# Workflows
# =========================
workflows:
  version: 2

  mqtt-gateway-pipeline:
    jobs:
      # Run on ALL branches
      - build_node_service:
          service_name: "mqtt-gateway"
          service_path: "main/mqtt-gateway"

      - test_node_service:
          service_name: "mqtt-gateway"
          service_path: "main/mqtt-gateway"
          entry_file: "app.js"
          requires: [build_node_service]

      - security_scan_bundle:
          service_name: "mqtt-gateway"
          requires: [build_node_service]

      # Deploy to staging only on develop
      - deploy_node_pm2_azure:
          context: "azure-mqtt-gateway"
          service_name: "mqtt-gateway"
          service_path: "main/mqtt-gateway"
          entry_file: "app.js"
          env: "staging"
          http_port: 8884
          mqtt_port: 1883
          requires:
            - test_node_service
            - security_scan_bundle
          filters:
            branches:
              only: develop

      # Deploy to production only on main
      - deploy_node_pm2_azure:
          context: "azure-mqtt-gateway"
          service_name: "mqtt-gateway"
          service_path: "main/mqtt-gateway"
          entry_file: "app.js"
          env: "production"
          http_port: 8884
          mqtt_port: 1883
          requires:
            - test_node_service
            - security_scan_bundle
          filters:
            branches:
              only: main
